import { PaginationQuery } from "#/@types/audio";
import Audio from "#/models/audio";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";
import History from "#/models/history";
import Playlist from "#/models/playlist";
import User, { UserDocument } from "#/models/user";
import { getUsersPreviousHistory } from "#/utils/helper";
import { RequestHandler } from "express";
import moment from "moment";
import { PipelineStage, Types, isValidObjectId } from "mongoose";

export const updateFollower: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  let status: "followed" | "unfollowed";
  if (!isValidObjectId(profileId))
    return res.status(422).json({ message: "Invalid profileId" });

  const profile = await User.findById({ _id: profileId });
  if (!profile) return res.status(404).json({ message: "Profile not found" });

  const alreadyAFollower = await User.findOne({
    _id: profileId,
    followers: req.user.id,
  });
  if (alreadyAFollower) {
    status = "unfollowed";
    await User.findOneAndUpdate(
      { _id: profileId },
      { $pull: { followers: req.user.id } }
    );
    await User.findByIdAndUpdate(req.user.id, {
      $pull: { following: profileId },
    });
  } else {
    status = "followed";
    await User.findOneAndUpdate(
      { _id: profileId },
      { $addToSet: { followers: req.user.id } }
    );
    await User.findByIdAndUpdate(req.user.id, {
      $addToSet: { following: profileId },
    });
  }
  return res.status(200).send({ status });
};
export const getUploads: RequestHandler = async (req, res) => {
  const { page = "0", limit = "20" } = req.query as {
    page: string;
    limit: string;
  };

  const result = await Audio.find({ owner: req.user.id })
    .skip(parseInt(page) * parseInt(limit))
    .limit(parseInt(limit));

  const audios = result.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      file: item.file.url,
      poster: item.poster?.url,
      category: item.category,
      owner: {
        name: req.user.name,
        id: req.user.id,
      },
    };
  });
  return res.status(200).json({ audios });
};
export const getPublicUploads: RequestHandler = async (req, res) => {
  const { page = "0", limit = "20" } = req.query as {
    page: string;
    limit: string;
  };
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res.status(422).json({ error: "Invalid ProfileId" });
  const result = await Audio.find({ owner: profileId })
    .skip(parseInt(page) * parseInt(limit))
    .limit(parseInt(limit))
    .populate<{ owner: UserDocument }>("owner");

  const audios = result.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      file: item.file.url,
      poster: item.poster?.url,
      category: item.category,
      owner: {
        name: item.owner.name,
        id: item.owner._id,
      },
    };
  });
  return res.status(200).json({ audios });
};
export const getPublicProfile: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res.status(422).json({ error: "Invalid profile" });

  const userProfile = await User.findById(profileId);
  if (!userProfile)
    return res.status(404).json({ error: "Profile not found!" });

  return res.status(200).json({
    profile: {
      name: userProfile.name,
      id: userProfile.id,
      followers: userProfile.followers.length,
      avatar: userProfile.avatar?.url,
    },
  });
};
export const getPublicPlaylist: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  const { page = "0", limit = "20" } = req.query as {
    page: string;
    limit: string;
  };
  if (!isValidObjectId(profileId))
    return res.status(404).json({ error: "Invalid Profile Id" });
  const playlistForProfile = await Playlist.find({
    visibility: "public",
    owner: profileId,
  })
    .skip(parseInt(page) * parseInt(limit))
    .sort("-createdAt");

  if (!playlistForProfile) return res.status(200).json({ playlist: [] });
  return res.status(200).json({
    playlist: playlistForProfile.map((p) => {
      return {
        id: p._id,
        title: p.title,
        itemCount: p.items.length,
        visibility: p.visibility,
      };
    }),
  });
};

export const getAutoGeneratedPlaylist: RequestHandler = async (req, res) => {
  // find out 5 playlist
  // 1 mix 20

  const [result] = await History.aggregate([
    { $match: { owner: req.user.id } },
    { $unwind: "$all" },
    { $group: { _id: "$all.audio", items: { $addToSet: "$all.audio" } } },
    { $sample: { size: 20 } },
    { $group: { _id: null, items: { $push: "$_id" } } },
  ]);

  const title = "Mix 20";

  if (result) {
    await Playlist.updateOne(
      { owner: req.user.id, title },
      { $set: { title, items: result.items, visibility: "auto" } },
      { upsert: true }
    );
  }

  // 4 autoGeneratedPlaylist
  const category = await getUsersPreviousHistory(req);
  let matchOptions: PipelineStage.Match = {
    $match: { _id: { $exists: true } },
  };

  if (category.length) {
    matchOptions = { $match: { title: { $in: category } } };
  }

  const agpl = await AutoGeneratedPlaylist.aggregate([
    matchOptions,
    { $sample: { size: 4 } },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        itemsCount: { $size: "$items" },
      },
    },
  ]);

  const playlist = await Playlist.findOne({ owner: req.user.id, title });

  const finalList = agpl.concat({
    id: playlist?._id,
    title: playlist?.title,
    itemsCount: playlist?.items.length,
  });

  res.json({ playlist: finalList });
};
export const getRecommendByProfile: RequestHandler = async (req, res) => {
  const user = req.user;

  let matchOptions: PipelineStage.Match = {
    $match: { _id: { $exists: true } },
  };

  if (user) {
    // then we want to send by the profile

    // fetch users previous history
    const histories = await getUsersPreviousHistory(req);

    const categories = histories.category;
    if (categories.length) {
      matchOptions = { $match: { category: { $in: categories } } };
    }
  }

  // otherwise we will send generic audios
  const audios = await Audio.aggregate([
    matchOptions,
    {
      $sort: {
        "likes.count": -1,
      },
    },
    { $limit: 10 },
    {
      $lookup: {
        from: "users",
        localField: "owner",
        foreignField: "_id",
        as: "owner",
      },
    },
    { $unwind: "$owner" },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        category: "$category",
        about: "$about",
        file: "$file.url",
        poster: "$poster.url",
        owner: { name: "$owner.name", id: "$owner._id" },
      },
    },
  ]);

  res.json({ audios });
};

export const getFollowersProfile: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as PaginationQuery;

  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followers" },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followers: [] });
  }

  res.json({ followers: result.followers });
};

export const getFollowersProfilePublic: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as PaginationQuery;
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Invalid profile id!" });
  }

  const [result] = await User.aggregate([
    { $match: { _id: new Types.ObjectId(profileId) } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followers" },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followers: [] });
  }

  res.json({ followers: result.followers });
};

export const getFollowingsProfile: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as PaginationQuery;

  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followings: {
          $slice: [
            "$followings",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followings" },
    {
      $lookup: {
        from: "users",
        localField: "followings",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followings: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followings: [] });
  }

  res.json({ followings: result.followings });
};

export const getPlaylistAudios: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as PaginationQuery;

  const { playlistId } = req.params;

  if (!isValidObjectId(playlistId))
    return res.status(422).json({ error: "Invalid playlist id!" });

  const aggregatationLogic = [
    {
      $match: {
        _id: new Types.ObjectId(playlistId),
        visibility: { $ne: "private" },
      },
    },
    {
      $project: {
        items: {
          $slice: [
            "$items",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "audios",
        localField: "items",
        foreignField: "_id",
        as: "audios",
      },
    },
    { $unwind: "$audios" },
    {
      $lookup: {
        from: "users",
        localField: "audios.owner",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        audios: {
          $push: {
            id: "$audios._id",
            title: "$audios.title",
            about: "$audios.about",
            category: "$audios.category",
            file: "$audios.file.url",
            poster: "$audios.poster.url",
            owner: { name: "$userInfo.name", id: "$userInfo._id" },
          },
        },
      },
    },
    {
      $project: {
        _id: 0,
        id: "$_id.id",
        title: "$_id.title",
        audios: "$$ROOT.audios",
      },
    },
  ];

  const [playlistResult] = await Playlist.aggregate(aggregatationLogic);

  if (!playlistResult) {
    const [autoPlaylistResult] = await AutoGeneratedPlaylist.aggregate(
      aggregatationLogic
    );
    return res.json({ list: autoPlaylistResult });
  }

  res.json({ list: playlistResult });
};

export const getPrivatePlaylistAudios: RequestHandler = async (req, res) => {
  const { limit = "20", pageNo = "0" } = req.query as PaginationQuery;

  const { playlistId } = req.params;

  if (!isValidObjectId(playlistId))
    return res.status(422).json({ error: "Invalid playlist id!" });

  const aggregatationLogic = [
    {
      $match: {
        _id: new Types.ObjectId(playlistId),
        owner: req.user.id,
      },
    },
    {
      $project: {
        items: {
          $slice: [
            "$items",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "audios",
        localField: "items",
        foreignField: "_id",
        as: "audios",
      },
    },
    { $unwind: "$audios" },
    {
      $lookup: {
        from: "users",
        localField: "audios.owner",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        audios: {
          $push: {
            id: "$audios._id",
            title: "$audios.title",
            about: "$audios.about",
            category: "$audios.category",
            file: "$audios.file.url",
            poster: "$audios.poster.url",
            owner: { name: "$userInfo.name", id: "$userInfo._id" },
          },
        },
      },
    },
    {
      $project: {
        _id: 0,
        id: "$_id.id",
        title: "$_id.title",
        audios: "$$ROOT.audios",
      },
    },
  ];

  const [playlistResult] = await Playlist.aggregate(aggregatationLogic);

  if (!playlistResult) {
    const [autoPlaylistResult] = await AutoGeneratedPlaylist.aggregate(
      aggregatationLogic
    );
    return res.json({ list: autoPlaylistResult });
  }

  res.json({ list: playlistResult });
};

export const getIsFollowing: RequestHandler = async (req, res) => {
  const { profileId } = req.params;

  if (!isValidObjectId(profileId))
    return res.status(422).json({ error: "Invalid profile id!" });

  const user = await User.findOne({ _id: profileId, followers: req.user.id });

  res.json({ status: user ? true : false });
};
